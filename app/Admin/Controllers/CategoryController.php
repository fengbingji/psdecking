<?php

namespace App\Admin\Controllers;

use App\Enums\ContentType;
use App\Models\Article;
use App\Models\Category;
use App\Models\CategoryTranslation;
use App\Models\Page;
use App\Models\Product;
use Dcat\Admin\Form;
use Dcat\Admin\Http\Actions\Menu\Show;
use Dcat\Admin\Http\Controllers\AdminController;
use Dcat\Admin\Layout\Column;
use Dcat\Admin\Layout\Content;
use Dcat\Admin\Layout\Row;
use Dcat\Admin\Tree;
use Dcat\Admin\Widgets\Box;
use Dcat\Admin\Widgets\Form as WidgetForm;
use Illuminate\Validation\Rule;

class CategoryController extends AdminController
{
    public array $locales;

    public function __construct()
    {
        $this->locales = collect(config('project.supported_locales'))->keyBy('lang')->toArray();
    }

    public function title()
    {
        return trans('网站目录');
    }

    public function index(Content $content): Content
    {
        return $content
            ->title($this->title())
            ->body(function (Row $row) {
                $row->column(6, $this->treeView()->render());

                $row->column(6, function (Column $column) {
                    $form = new WidgetForm;
                    $form->action(admin_url('category'));

                    $form->select('parent_id', trans('admin.parent_id'))->options(Category::selectOptions(rootText: '根目录'));
                    $form->text('name', trans('名称'))->required();
                    $form->text('slug', trans('url别名'));
                    $form->hidden('content_type');

                    $form->width(9, 2);

                    $column->append(Box::make(trans('admin.new'), $form));
                });
            });
    }

    public function edit($id, Content $content): Content
    {
        $this->initTrans($id);

        return parent::edit($id, $content); // TODO: Change the autogenerated stub
    }

    protected function treeView(): Tree
    {
        return new Tree((new Category), function (Tree $tree) {
            $tree->disableCreateButton();
            $tree->disableQuickCreateButton();
            $tree->disableEditButton();
            $tree->maxDepth(3);

            $tree->actions(function (Tree\Actions $actions) {
                if ($actions->getRow()->parent_id == 0) {
                    $actions->disableDelete();
                }

                $actions->prepend(new Show);
            });

            $tree->branch(function ($branch) {
                return "<strong>{$branch['name']}</strong>";
            });
        });
    }

    /**
     * Make a form builder.
     */
    public function form(): Form
    {
        return Form::make(Category::with('translations'), function (Form $form) {
            $form->tools(function (Form\Tools $tools) {
                $tools->disableView();
            });

            $form->tab('基础配置', function (Form $form) {
                $form->display('id', 'ID');

                $form->select('parent_id', trans('admin.parent_id'))->options(function () {
                    return Category::selectOptions();
                })->saving(function ($v) {
                    return (int) $v;
                });
                $form->text('name', trans('名称'))->required();
                $form->hidden('content_type');
                $form->text('slug', trans('url别名'))
                    ->required()
                    ->creationRules(['required', Rule::unique('categories', 'slug')->where(function ($query) use ($form) {
                        $query->where('content_type', $form->input('content_type'));
                    })])
                    ->updateRules(['required', Rule::unique('categories', 'slug')->where(function ($query) use ($form) {
                        $query->where('content_type', $form->input('content_type'));
                    })->ignore($form->getKey())]);
                $form->switch('show', trans('admin.show'));
            });

            $form->tab('多语言配置', function (Form $form) {
                $form->hasMany('translations', '', function (Form\NestedForm $form) {
                    $locales = $this->locales;
                    $form->display('locale', trans('语言'))->customFormat(function ($locale) use ($locales) {
                        return $locales[$locale]['name'] ?? '-';
                    });
                    $form->text('name');
                    $form->text('keywords');
                    $form->text('description');
                    $form->hidden('locale');
                })->disableCreate()->disableDelete();
            });

        })
            ->deleting(function (Form $form) {
                foreach ($form->model()->toArray() as $category) {
                    switch ($category['content_type']) {
                        case ContentType::Product:
                            if (Product::where('category_id', $category['id'])->count() > 0) {
                                return $form->response()->error('该目录下有产品，请先删除产品再删除目录');
                            }
                            break;
                        case ContentType::Article:
                            if (Article::where('category_id', $category['id'])->count() > 0) {
                                return $form->response()->error('该目录下有文章，请先删除文章再删除目录');
                            }
                            break;
                        case ContentType::Page:
                            if (Page::where('category_id', $category['id'])->count() > 0) {
                                return $form->response()->error('该目录下有相关页面，请先删除页面再删除目录');
                            }
                            break;
                        default:
                            return true;
                    }

                }

                return true;
            })
            ->deleted(function (Form $form, $result) {
                if ($result) {
                    foreach ($form->model()->toArray() as $category) {
                        CategoryTranslation::where('category_id', $category['id'])->delete();
                    }

                }
            })
            ->submitted(function (Form $form) {
                $parent = Category::find($form->input('parent_id'));
                $form->input('content_type', $parent->content_type->value);
            })
            ->saved(function (Form $form, $result) {
                self::initTrans($form->getKey());

                $response = $form->response()->location('category');

                if ($result) {
                    return $response->success(__('admin.save_succeeded'));
                }

                return $response->info(__('admin.nothing_updated'));
            });
    }

    public static function initTrans($categoryId): void
    {
        $category = Category::with('translations')->find($categoryId);
        $existingLocales = $category->translations->pluck('locale')->toArray();
        $locales = collect(config('project.supported_locales'))->keyBy('lang')->toArray();

        foreach ($locales as $locale => $details) {
            if (! in_array($locale, $existingLocales)) {
                $category->translations()->create([
                    'locale' => $locale,
                    'name' => $category->name,
                    'keywords' => $category->keywords,
                    'description' => $category->description,
                ]);
            }
        }
    }
}
